{"version":3,"sources":["Table/styles.module.scss","App.module.scss","Table/index.tsx","api/helper.ts","App.tsx","api/use-coins-api.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","CoinsCapTable","props","rowsData","headerData","renderHeaderRow","useCallback","className","styles","TableHeader","TableRowMobileHidden","renderRows","map","row","index","TableRow","key","id","TableCell","name","price","marketCap","dayVolume","Container","TableHead","TableBody","toDollarPriceString","priceNumber","numeral","format","mapToLocalModel","assetsData","mappedData","sortByMarketCap","slice","apiCoin","priceUsd","marketCapUsd","volumeUsd24Hr","data","assetsApiData","sort","a","b","Number","parseInt","App","useState","timestamp","setAssetsData","assetsRef","useRef","useEffect","current","fetch","then","response","json","catch","WebSocket","onmessage","msg","newData","JSON","parse","updatedData","item","newPrice","toLowerCase","useCoinsApi","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,UAAY,0BAA0B,UAAY,0BAA0B,UAAY,0BAA0B,YAAc,4BAA4B,qBAAuB,uC,mBCA3OD,EAAOC,QAAU,CAAC,IAAM,mB,yKCSXC,EAAsC,SAACC,GAAW,IACnDC,EAAyBD,EAAzBC,SAAUC,EAAeF,EAAfE,WAEZC,EAAkBC,uBAAY,WAChC,OACI,4BACI,wBAAIC,UAAWC,IAAOC,aAAtB,MACA,wBAAIF,UAAWC,IAAOC,aAAcL,EAAW,IAC/C,wBAAIG,UAAWC,IAAOC,aAAcL,EAAW,IAC/C,wBAAIG,UAAS,UAAKC,IAAOC,YAAZ,YAA2BD,IAAOE,uBAAyBN,EAAW,IACnF,wBAAIG,UAAS,UAAKC,IAAOC,YAAZ,YAA2BD,IAAOE,uBAAyBN,EAAW,OAG5F,CAACA,IAEEO,EAAaL,uBAAY,kBAAMH,EAASS,KAAI,SAACC,EAAKC,GAAN,OAE1C,wBAAIP,UAAWC,IAAOO,SAAUC,IAAKH,EAAII,IACrC,wBAAIV,UAAWC,IAAOU,WAAYJ,GAClC,wBAAIP,UAAWC,IAAOU,WAAYL,EAAIM,MACtC,wBAAIZ,UAAWC,IAAOU,WAAYL,EAAIO,OACtC,wBAAIb,UAAS,UAAKC,IAAOU,UAAZ,YAAyBV,IAAOE,uBAAyBG,EAAIQ,WAC1E,wBAAId,UAAS,UAAKC,IAAOU,UAAZ,YAAyBV,IAAOE,uBAAyBG,EAAIS,iBAGlF,CAACnB,IAEL,OACI,yBAAKI,UAAWC,IAAOe,WACnB,+BACI,2BAAOhB,UAAWC,IAAOgB,WACpBnB,KAEL,2BAAOE,UAAWC,IAAOiB,WACpBd,Q,8BCzCRe,EAAsB,SAACC,GAChC,OAAOC,IAAQD,GAAaE,OAAO,YAG1BC,EAAkB,SAACC,GAC5B,IACMC,EADmBC,EAAgBF,GAAYG,MAAM,EAAE,IACzBtB,KAAI,SAAAuB,GAAO,MAAK,CAChDlB,GAAIkB,EAAQlB,GACZE,KAAMgB,EAAQhB,KACdC,MAAOM,EAAoBS,EAAQC,UACnCf,UAAWK,EAAoBS,EAAQE,cACvCf,UAAWI,EAAoBS,EAAQG,mBAG3C,OAAO,eACAP,EADP,CAEIQ,KAAMP,KAIDC,EAAkB,SAACO,GAC5B,OAAOA,EAAcD,KAChBE,MAAK,SAACC,EAAEC,GAAH,OAASC,OAAOC,SAASF,EAAEN,cAAgBO,OAAOC,SAASH,EAAEL,kBCH5DS,EAjBO,WAAO,IACjBP,ECFe,WAAO,IAAD,EACOQ,mBAAqB,CAACR,KAAM,GAAIS,UAAW,IADlD,mBACtBjB,EADsB,KACVkB,EADU,KAEvBC,EAAYC,iBAAmBpB,GAoCrC,OAlCAqB,qBAAU,WACNF,EAAUG,QAAUtB,IACrB,CAACA,IAEJqB,qBAAU,WACNE,MAAM,oCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAKzB,GACLyB,KAAKN,GACLS,OAAM,eAIK,IAAIC,UAAU,yCAEtBC,UAAY,SAAUC,GAC1B,IAAMC,EAAUC,KAAKC,MAAMH,EAAItB,MACzB0B,EAAcf,EAAUG,QAAQd,KAAK3B,KAAI,SAAAsD,GAC3C,IAAMC,EAAWL,EAAQI,EAAK/C,KAAKiD,eAMnC,OAJID,IACAD,EAAK9C,MAAQM,EAAoByC,IAG9BD,KAGXjB,EAAc,eACPC,EAAUG,QADJ,CAETd,KAAM0B,QAGf,CAAChB,IAEGlB,EDpCUsC,GAAT9B,KAER,OACI,yBAAKhC,UAAWC,IAAOsC,KACnB,kBAAC,EAAD,CAAe1C,WACX,CACI,OACA,QACA,aACA,iBAEND,SAAUoC,MELJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.5a87f1c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__rawaO\",\"TableHead\":\"styles_TableHead__3tIYp\",\"TableBody\":\"styles_TableBody__2pFxU\",\"TableCell\":\"styles_TableCell__3IWS2\",\"TableHeader\":\"styles_TableHeader__qJqOj\",\"TableRowMobileHidden\":\"styles_TableRowMobileHidden__2Y_uQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import React, {useCallback} from 'react';\n\nimport styles from './styles.module.scss';\nimport {CoinData} from \"../api/types\";\n\nexport type TableProps = {\n    headerData: string[];\n    rowsData: CoinData[];\n}\n\nexport const CoinsCapTable: React.FC<TableProps> = (props) => {\n    const { rowsData, headerData } = props;\n\n    const renderHeaderRow = useCallback(() => {\n        return (\n            <tr>\n                <th className={styles.TableHeader}>N#</th>\n                <th className={styles.TableHeader}>{headerData[0]}</th>\n                <th className={styles.TableHeader}>{headerData[1]}</th>\n                <th className={`${styles.TableHeader} ${styles.TableRowMobileHidden}`}>{headerData[2]}</th>\n                <th className={`${styles.TableHeader} ${styles.TableRowMobileHidden}`}>{headerData[3]}</th>\n            </tr>\n        )\n    }, [headerData]);\n\n    const renderRows = useCallback(() => rowsData.map((row, index) => (\n        (\n            <tr className={styles.TableRow} key={row.id}>\n                <td className={styles.TableCell}>{index}</td>\n                <td className={styles.TableCell}>{row.name}</td>\n                <td className={styles.TableCell}>{row.price}</td>\n                <td className={`${styles.TableCell} ${styles.TableRowMobileHidden}`}>{row.marketCap}</td>\n                <td className={`${styles.TableCell} ${styles.TableRowMobileHidden}`}>{row.dayVolume}</td>\n            </tr>\n        )\n    )), [rowsData]);\n\n    return (\n        <div className={styles.Container}>\n            <table >\n                <thead className={styles.TableHead}>\n                    {renderHeaderRow()}\n                </thead>\n                <tbody className={styles.TableBody}>\n                    {renderRows()}\n                </tbody>\n            </table>\n        </div>\n    )\n};","import {AssetsApiData} from \"./types\";\nimport numeral from \"numeral\";\n\nexport const toDollarPriceString = (priceNumber: number | string) => {\n    return numeral(priceNumber).format('$0,0.00');\n};\n\nexport const mapToLocalModel = (assetsData: AssetsApiData) => {\n    const sortedAssetsData = sortByMarketCap(assetsData).slice(0,15);\n    const mappedData = sortedAssetsData.map(apiCoin => ({\n        id: apiCoin.id,\n        name: apiCoin.name,\n        price: toDollarPriceString(apiCoin.priceUsd),\n        marketCap: toDollarPriceString(apiCoin.marketCapUsd),\n        dayVolume: toDollarPriceString(apiCoin.volumeUsd24Hr),\n    }));\n\n    return {\n        ...assetsData,\n        data: mappedData,\n    }\n};\n\nexport const sortByMarketCap = (assetsApiData: AssetsApiData) => {\n    return assetsApiData.data\n        .sort((a,b) => Number.parseInt(b.marketCapUsd) - Number.parseInt(a.marketCapUsd))\n};","import React from 'react';\nimport styles from './App.module.scss';\nimport {CoinsCapTable} from \"./Table\";\nimport {useCoinsApi} from \"./api/use-coins-api\";\n\nconst App: React.FC = () => {\n    const { data } = useCoinsApi();\n\n    return (\n        <div className={styles.App}>\n            <CoinsCapTable headerData={\n                [\n                    'Name',\n                    'Price',\n                    'Market Cap',\n                    'Volume(24 Hr)',\n                ]\n            } rowsData={data}/>\n        </div>\n    );\n};\n\nexport default App;\n","import {useEffect, useRef, useState} from \"react\";\nimport {AssetsData} from \"./types\";\nimport {mapToLocalModel, toDollarPriceString} from \"./helper\";\n\nexport const useCoinsApi = () => {\n    const [assetsData, setAssetsData] = useState<AssetsData>({data: [], timestamp: 0});\n    const assetsRef = useRef<AssetsData>(assetsData);\n    \n    useEffect(() => {\n        assetsRef.current = assetsData;\n    }, [assetsData]);\n\n    useEffect(() => {\n        fetch('https://api.coincap.io/v2/assets')\n            .then(response => response.json())\n            .then(mapToLocalModel)\n            .then(setAssetsData)\n            .catch(() => {\n                debugger;\n            });\n\n        const tradeWs = new WebSocket('wss://ws.coincap.io/prices?assets=ALL');\n\n        tradeWs.onmessage = function (msg) {\n            const newData = JSON.parse(msg.data);\n            const updatedData = assetsRef.current.data.map(item => {\n                const newPrice = newData[item.name.toLowerCase()];\n\n                if (newPrice) {\n                    item.price = toDollarPriceString(newPrice);\n                }\n\n                return item;\n            });\n\n            setAssetsData({\n                ...assetsRef.current,\n                data: updatedData\n            })\n        }\n    }, [setAssetsData]);\n\n    return assetsData;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}